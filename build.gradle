plugins {
    id 'idea'
    id "org.jetbrains.gradle.plugin.idea-ext" version "1.1.9"
    id "java"
    id "java-library"
    id 'fabric-loom' version '1.7-SNAPSHOT' apply false
}

idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
    afterEvaluate {
        project.settings {
            taskTriggers {
                afterBuild tasks.getByName("fixIntelliJResources")
                afterRebuild tasks.getByName("fixIntelliJResources")
            }
        }
    }
}

repositories {
    maven {
        name = 'ParchmentMC'
        url = 'https://maven.parchmentmc.org'
    }

    maven { url = "https://maven.fabricmc.net/" } // FAPI, Loader
    maven { url = "https://maven.quiltmc.org/repository/release" } // QM

    maven { url = "https://maven.terraformersmc.com/releases/" } // ModMenu, Emi
    maven { url = "https://maven.shedaniel.me/" } // REI and deps
    maven { url = "https://modmaven.dev" } // Jei
    exclusiveContent {
        forRepository {
            maven {
                name = "Modrinth"
                url = "https://api.modrinth.com/maven"
            }
        }
        filter {
            includeGroup "maven.modrinth"
        }
    }
}

allprojects {
    apply plugin: "fabric-loom"

    dependencies {
        minecraft("com.mojang:minecraft:$project.minecraft_version")
        mappings(loom.layered {
            it.officialMojangMappings()
            it.parchment("org.parchmentmc.data:parchment-${project.parchment_version}@zip")
        })
    }
}

dependencies {
    modImplementation("net.fabricmc:fabric-loader:$project.loader_version")
    modImplementation("net.fabricmc.fabric-api:fabric-api:$project.fabric_version")

    implementation("javax.annotation:javax.annotation-api:1.3.2")
    implementation("com.google.code.findbugs:jsr305:3.0.2")

    modImplementation("com.terraformersmc:modmenu:$project.modmenu_version")

    switch (recipe_viewer.toLowerCase(Locale.ROOT)) {
        case "emi": modLocalRuntime("dev.emi:emi-fabric:$project.emi_version"); logger.lifecycle("EMI loaded"); break
        case "jei": modLocalRuntime("mezz.jei:jei-$project.minecraft_version-fabric:$project.jei_version"); logger.lifecycle("JEI loaded"); break
        case "rei": modLocalRuntime("me.shedaniel:RoughlyEnoughItems-fabric:$project.rei_version"); logger.lifecycle("REI loaded"); break
        case "disabled": break
        default: logger.lifecycle("Unknown recipe viewer specified: $project.recipe_viewer. Must be JEI, REI, EMI, or disabled.")
    }
}

loom {
    runs {
        client {
            client()

            configName = "Minecraft Client ${project.minecraft_version}"
            runDir "run/${project.minecraft_version}"

            property("mixin.debug.export=true") // export all mixins
            property("mixin.debug.strict.unique=true") // strictly enforce that @Unique things are private
            property("mixin.debug.countInjections=true")
            vmArg("-XX:+AllowEnhancedClassRedefinition")
            if (System.getenv("HOTSWAP_AGENT") != null) {
                property("fabric.systemLibraries=" + System.getenv("HOTSWAP_AGENT"))
                vmArg("--add-exports=java.base/sun.nio.ch=ALL-UNNAMED")
                vmArg("--add-opens=java.base/java.lang=ALL-UNNAMED")
                vmArg("--add-opens=java.base/java.lang.reflect=ALL-UNNAMED")
                vmArg("--add-opens=java.base/java.io=ALL-UNNAMED")
                vmArg("--add-opens=java.desktop/java.beans=ALL-UNNAMED")
                vmArg("--add-exports=jdk.unsupported/sun.misc=ALL-UNNAMED")
            }

            try {
                afterEvaluate {
                    def mixinDep = this.configurations.compileClasspath.incoming.artifactView {
                        componentFilter {
                            it instanceof ModuleComponentIdentifier
                                    && it.module == "sponge-mixin"
                        }
                    }

                    if (mixin != null) {
                        vmArg("-javaagent:${mixinDep.files.first().path}")
                        println("[Info]: Mixin Hotswap setup finished")
                    } else {
                        println("[Warning]: Unable to locate file path for Mixin jar")
                    }
                }
            } catch (Exception e) {
                println("[Error]: Mixin Hotswap setup failed!")
                e.printStackTrace()
            }
        }

        server {
            server()

            configName = "Minecraft Server ${project.minecraft_version}"
            runDir "run/${project.minecraft_version}"
        }
    }
}

subprojects {
    afterEvaluate {
        loom.runs {
            datagen {
                ideConfigGenerated = true
            }
        }
    }
}

subprojects.each { p ->
    dependencies {
        implementation project(path: "${p.path}", configuration: "namedElements")
    }

    loom.mods.register(p.name) {
        sourceSet p.sourceSets.main
    }
}

tasks.register("fixIntelliJResources") {
    group 'fabric'
}