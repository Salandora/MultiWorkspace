//file:noinspection GrMethodMayBeStatic
buildscript {
    repositories {
        maven { url = "https://plugins.gradle.org/m2/" }
        maven { url = "https://maven.fabricmc.net/" }
        maven { url = "https://server.bbkr.space/artifactory/libs-release/" }
        maven { url = "https://maven.quiltmc.org/repository/release" }
        mavenCentral()
        gradlePluginPortal()
    }
}

plugins {
    id "fabric-loom" version "1.5-SNAPSHOT"
}

repositories {
    mavenLocal()
    mavenCentral()

    maven { url = "https://maven.quiltmc.org/repository/release" } // QM
    maven { url = 'https://maven.parchmentmc.org' } // Parchment

    maven { url = "https://maven.fabricmc.net/" } // FAPI, Loader
    maven { url = "https://mvn.devos.one/snapshots/" } // Porting Lib, Forge Tags, Milk Lib, serialization-hooks
    maven { url = "https://jitpack.io/" } // for Porting Lib: Mixin Extras, Fabric ASM
    maven { // Forge Config API Port
        name = "Fuzs Mod Resources"
        url = "https://raw.githubusercontent.com/Fuzss/modresources/main/maven/"
    }
    maven { // Modern KeyBinding
        url = "https://maven.nova-committee.cn/releases"
    }

    maven { url = "https://maven.terraformersmc.com/" } // Emi
    maven { url = "https://maven.shedaniel.me/" } // REI and deps
    exclusiveContent {
        forRepository {
            maven {
                name = "Modrinth"
                url = "https://api.modrinth.com/maven"
            }
        }
        filter {
            includeGroup "maven.modrinth"
        }
    }
    maven {
        name = "entity reach"
        url = "https://maven.jamieswhiteshirt.com/libs-release/"
    }

    maven { url = 'https://maven.blamejared.com' }
    maven { url = "https://modmaven.dev" } // Jei
    maven { url = "https://maven.ladysnake.org/releases" } // CCA, for Trinkets
    maven { url = "https://www.cursemaven.com" } // Balm, CraftingTweaks
    maven { url = "https://maven.teamresourceful.com/repository/maven-public/" } // Chipped, resourcefullib
    maven {
        name = "GitHubPackages"
        url = uri("https://maven.pkg.github.com/Salandora/sophisticatedcore")
        credentials {
            username = System.getenv("USERNAME")
            password = System.getenv("READ_PACKAGES_TOKEN")
        }
    }
}

dependencies {
    setup(dependencies)
    devEnv(dependencies)
    recipeViewers(dependencies)
}

def setup(DependencyHandler deps) {
    deps.minecraft("com.mojang:minecraft:$minecraft_version")
    deps.mappings(loom.layered {
        it.mappings("org.quiltmc:quilt-mappings:$minecraft_version+build.$qm_version:intermediary-v2")
        it.officialMojangMappings { nameSyntheticMembers = false }
    })
    deps.modLocalRuntime("net.fabricmc:fabric-loader:$loader_version")

    deps.modLocalRuntime("net.fabricmc.fabric-api:fabric-api:$fabric_version")

    // Core requirements
    deps.modLocalRuntime("net.minecraftforge:forgeconfigapiport-fabric:${forge_config_api_port_version}")
    deps.modLocalRuntime("committee.nova.mkb.fabric:mkb-${minecraft_version}:${mkb_mod_version}")
}

def devEnv(DependencyHandler deps) {
    deps.modLocalRuntime("com.terraformersmc:modmenu:$modmenu_version")
    deps.modLocalRuntime("me.shedaniel.cloth:cloth-config-fabric:$cloth_config_version")

    // Create - dependencies are added transitively
    deps.modImplementation("com.simibubi.create:create-fabric-${minecraft_version}:${create_version}")

    deps.modLocalRuntime("curse.maven:balm-500525:${balm_cf_file_id}")
    deps.modLocalRuntime("curse.maven:craftingtweaks-502516:${crafting_tweaks_cf_file_id}")

    deps.modImplementation("curse.maven:chipped-456956:${chipped_cf_file_id}")
    deps.modImplementation("curse.maven:resourcefullib-570073:${resourcefullib_cf_file_id}")
//    deps.modImplementation("curse.maven:ctm-267602:${ctm_cf_file_id}")

    // deps.modLocalRuntime("maven.modrinth:sodium:mc${minecraft_version}-${sodium_version}")
    // deps.modLocalRuntime("maven.modrinth:indium:${indium_version}+mc${minecraft_version}")
    // deps.modLocalRuntime("curse.maven:config-menus-forge-544048:${forge_config_screen_version}")

    deps.modLocalRuntime("vazkii.botania:Botania:$botania_version")
    deps.modLocalRuntime("vazkii.patchouli:Patchouli:$patchouli_version")

    deps.modLocalRuntime("dev.emi:trinkets:$trinkets_version")
}

def recipeViewers(DependencyHandler deps) {
    switch (recipe_viewer.toLowerCase(Locale.ROOT)) {
        case "emi": deps.modLocalRuntime("dev.emi:emi-fabric:$emi_version"); break
        case "jei": deps.modLocalRuntime("mezz.jei:jei-$minecraft_version-fabric:$jei_version"); break
        case "rei": deps.modLocalRuntime("me.shedaniel:RoughlyEnoughItems-fabric:$rei_version"); break
        case "disabled": break
        default: println("Unknown recipe viewer specified: $recipe_viewer. Must be JEI, REI, EMI, or disabled.")
    }
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

loom {
    runs {
        // make default run configs run all modules
        client {
            client()
            ideConfigGenerated = true

            vmArg "-Dmixin.debug.export=true"
            vmArg "-enableassertions"

            name "Minecraft Client (all modules)"
            source sourceSets.main
            runDir "run/test_client"
        }
        server {
            server()
            ideConfigGenerated = true

            vmArg "-Dmixin.debug.export=true"
            vmArg "-enableassertions"

            name "Minecraft Server (all modules)"
            source sourceSets.main
            runDir "run/test_server"
        }
    }
}

def moduleDependency(Project p) {
    dependencies {
        afterEvaluate {
            implementation project(path: "${p.path}", configuration: "namedElements")
        }
        if (p.port_lib_modules != null) {
            for (String module in p.port_lib_modules.split(",")) {
                modImplementation("io.github.fabricators_of_create.Porting-Lib:${module.trim()}:$port_lib_version+$minecraft_version")
            }
        }
    }

    loom.mods.register(p.name) {
        sourceSet p.sourceSets.main
    }
}

tasks.named("build") {}